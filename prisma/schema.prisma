// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id       String   @id @default(uuid())
  username String
  email    String   @unique
  password String
  Team     Team[]
  Member   Member[]
}

model Team {
  id        String       @id @default(cuid())
  createdBy User         @relation(fields: [userId], references: [id])
  teamName  String
  timestamp String
  members   Member[]
  userId    String
  invites   TeamInvite[]
}

model TeamInvite {
  id               String       @id @default(uuid())
  teamId           String
  invitedUserEmail String
  status           InviteStatus @default(PENDING)
  team             Team         @relation(fields: [teamId], references: [id])
}

enum InviteStatus {
  PENDING
  ACCEPTED
  DECLINED
}

model Member {
  id             String         @id @default(cuid())
  age            Int
  comments       Comment[]
  customAnswers  CustomAnswer[]
  customQuestion String
  hobbies        String
  linkedIn       String
  name           String
  place          String
  question1      String
  question2      String
  Team           Team?          @relation(fields: [teamId], references: [id])
  teamId         String?
  userProfile    User           @relation(fields: [userId], references: [id])
  userId         String
}

model Comment {
  id       String  @id @default(cuid())
  comment  String
  name     String
  memberId String?
  Member   Member? @relation(fields: [memberId], references: [id])
}

model CustomAnswer {
  id       String  @id @default(cuid())
  answer   String
  email    String
  name     String
  memberId String?
  Member   Member? @relation(fields: [memberId], references: [id])
}
